{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","FeedbackOptions","options","onLeaveFeedback","className","s","FeedbackOptionsWrapper","map","option","FeedbackOptionsButton","type","name","onClick","Section","title","children","SectionTitle","protoTypes","PropTypes","string","Statistics","good","neutral","bad","total","positivePercentage","StatisticsText","StatisticsValue","Notification","message","WrapperFeedback","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","target","prevGood","prevNeutral","prevBad","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7736e5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"StatisticsText\":\"Statistics_StatisticsText__2Rca0\",\"StatisticsValue\":\"Statistics_StatisticsValue__6IPnN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FeedbackOptionsButton\":\"FeedbackOptions_FeedbackOptionsButton__2bGHr\",\"FeedbackOptionsWrapper\":\"FeedbackOptions_FeedbackOptionsWrapper__1qL8z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SectionTitle\":\"Section_SectionTitle__2XPOF\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <div className={s.FeedbackOptionsWrapper}>\n      {options.map(option => (\n        <button\n          className={s.FeedbackOptionsButton}\n          key={option}\n          type=\"button\"\n          name={option}\n          onClick={onLeaveFeedback}\n        >\n          {option}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nconst Section = ({ title, children }) => {\n  return (\n    <>\n      <h1 className={s.SectionTitle}>{title}</h1>\n      {children}\n    </>\n  );\n};\n\nSection.protoTypes = {\n  title: PropTypes.string,\n  children: PropTypes.string,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Statistics.module.css';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <p className={s.StatisticsText}>\n        good: <span className={s.StatisticsValue}>{good}</span>\n      </p>\n      <p className={s.StatisticsText}>\n        neutral:<span className={s.StatisticsValue}>{neutral}</span>\n      </p>\n      <p className={s.StatisticsText}>\n        bad:<span className={s.StatisticsValue}>{bad}</span>\n      </p>\n      <p className={s.StatisticsText}>\n        total:<span className={s.StatisticsValue}>{total}</span>\n      </p>\n      <p className={s.StatisticsText}>\n        positivePercentage:\n        <span className={s.StatisticsValue}>{positivePercentage}&#37;</span>\n      </p>\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return (\n    <>\n      <p>{message}</p>\n    </>\n  );\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import React, { useState } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\nimport './App.css';\n\nconst WrapperFeedback = ['WrapperFeedback'];\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = e => {\n    switch (e.target.name) {\n      case 'good':\n        setGood(prevGood => prevGood + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(prevNeutral => prevNeutral + 1);\n        break;\n\n      case 'bad':\n        setBad(prevBad => prevBad + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return Math.round((good / countTotalFeedback()) * 100) || 0;\n  };\n\n  const countTotalFeedback = () => {\n    const result = good + neutral + bad;\n    return result;\n  };\n\n  return (\n    <div className={WrapperFeedback}>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n      </Section>\n      {countTotalFeedback() === 0 ? (\n        <Notification message=\"There is no feedback\" />\n      ) : (\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      )}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}